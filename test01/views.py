from django.shortcuts import render
import sqlite3
import pandas as pd
from rest_framework import viewsets 
from .serializers import UserSerializer, GroupSerializer
from django.contrib.auth.models import User,Group

import html
# Create your views here.

class UserViewSet(viewsets.ModelViewSet):
    """
    允许用户查看或编辑的api路径
    """
    queryset=User.objects.all()  #  .order_by("-date_joined")
    serializer_class=UserSerializer

class GroupViewSet(viewsets.ModelViewSet):
    """
    允许用户查看或编辑的api路径
    """
    queryset=Group.objects.all()
    serializer_class=GroupSerializer

dic={'1_1_1': ['月份',
  '样地',
  '水温（T）',
  '总溶解固体（TDS）',
  '土壤电导率（EC）',
  'pH',
  '溶解氧（DO）',
  '化学耗氧量（COD）',
  '生物耗氧量（BOD）',
  '氨氮（NH3-N）',
  '总氮（TN）',
  '总磷（TP）',
  '总硬度',
  '硫化物',
  '粪大肠菌群',
  '铬（Cr）',
  '铜（Cu）',
  '锌（Zn）',
  '砷（As）',
  '铅（Pb）'],
 '1_1_2': ['监测日期',
  '监测地点',
  '水温（T）',
  '总溶解固体（TDS）',
  '土壤电导率（EC）',
  'pH',
  '溶解氧（DO）',
  '化学耗氧量（COD）',
  '生物耗氧量（BOD）',
  '氨氮（NH3-N）',
  '总氮（TN）',
  '总磷（TP）',
  '总硬度',
  '硫化物',
  '粪大肠菌群',
  '铬（Cr）',
  '铜（Cu）',
  '锌（Zn）',
  '砷（As）',
  '铅（Pb）'],
 '2_1_1': ['序号',
  '月份',
  'GPS样点',
  '样品号',
  '铝（Al3961）',
  '砷（As1890）',
  '硼（B2089）',
  '硼（B2496）',
  '硼（B2497）',
  '钡（Ba4934）',
  '铍（Be2348）',
  '钙（Ca3179）',
  '镉（Cd2265）',
  '铂（Co2286）',
  '铂（Co2378）',
  '铬（Cr2835）',
  '铜（Cu3273）',
  '铁（Fe2382）',
  '铁（Fe2395）',
  '铁（Hg2599）',
  '汞（Hg1849）',
  '汞（Hg1942）',
  '钾（K7664）',
  '钾（K7698）',
  '镁（Mg2795）',
  '镁（Mg2802）',
  '镁（Mg2852）',
  '锰（Mn2605）',
  '硅（Si2516）',
  '硅（Si2881）',
  '锡（Sn2429）',
  '锡（Sn2839）',
  '锶（Sr2152）',
  '锶（Sr2165）',
  '锶（Sr3464硅）',
  '钛（Ti3234）',
  '钛（Ti3361）',
  '钒（V2924）',
  '锌（Zn2062）'],
 '2_1_2': ['序号',
  '月份',
  'GPS样点',
  '样品号',
  '铝（Al3961）',
  '砷（As1890）',
  '硼（B2089）',
  '硼（B2496）',
  '硼（B2497）',
  '钡（Ba4934）',
  '铍（Be2348）',
  '钙（Ca3179）',
  '镉（Cd2265）',
  '铂（Co2286）',
  '铂（Co2378）',
  '铬（Cr2835）',
  '铜（Cu3273）',
  '铁（Fe2382）',
  '铁（Fe2395）',
  '铁（Hg2599）',
  '汞（Hg1849）',
  '汞（Hg1942）',
  '钾（K7664）',
  '钾（K7698）',
  '镁（Mg2795）',
  '镁（Mg2802）',
  '镁（Mg2852）',
  '锰（Mn2605）',
  '钼（Mo2045）',
  '钠（Na5895）',
  '镍（Ni2316）',
  '磷（P1774）',
  '磷（P1782）',
  '铅（Pb1822）',
  '硒（Se1960）',
  '硅（Si2124）',
  '硅（Si2516）',
  '硅（Si2881）',
  '锡（Sn2429）',
  '锡（Sn2839）',
  '锶（Sr2152）',
  '锶（Sr2165）',
  '锶（Sr3464硅）',
  '钛（Ti3234）',
  '钛（Ti3361）',
  '钒（V2924）',
  '锌（Zn2062）'],
 '2_1_3': ['序号',
  '月份',
  'GPS样点',
  '样品号',
  '铝（Al3961）',
  '砷（As1890）',
  '硼（B2089）',
  '硼（B2496）',
  '硼（B2497）',
  '钡（Ba4934）',
  '铍（Be2348）',
  '钙（Ca3179）',
  '镉（Cd2265）',
  '铂（Co2286）',
  '铂（Co2378）',
  '铬（Cr2835）',
  '铜（Cu3273）',
  '铁（Fe2382）',
  '铁（Fe2395）',
  '汞（Hg1849）',
  '汞（Hg1942）',
  '钾（K7664）',
  '钾（K7698）',
  '镁（Mg2795）',
  '镁（Mg2802）',
  '镁（Mg2852）',
  '锰（Mn2605）',
  '钼（Mo2045）',
  '钠（Na5895）',
  '镍（Ni2316）',
  '磷（P1774）',
  '磷（P1782）',
  '铅（Pb1822）',
  '硒（Se1960）',
  '硅（Si2124）',
  '硅（Si2516）',
  '硅（Si2881）',
  '锡（Sn2429）',
  '锡（Sn2839）',
  '锶（Sr2152）',
  '锶（Sr2165）',
  '锶（Sr3464硅）',
  '钛（Ti3234）',
  '钛（Ti3361）',
  '钒（V2924）',
  '锌（Zn2062）',
  '汞（Hg2599）'],
 '2_2_1': ['序号',
  '月份',
  '样品号',
  '经度',
  '纬度',
  'ph',
  '全氮g/kg',
  '水解性氮mg/kg',
  '有机物%',
  '有效磷（mg/kg)',
  '有效钾(mg/kg)',
  '全钾（g/kg）',
  '全磷(g/kg)'],
 '3_1_1': ['序号', '养殖场', '样品号', 'pH'],
 '3_1_2': ['序号',
  '养殖场',
  '样品号',
  '铝（Al3961）',
  '砷（As1937）',
  '硼（B2089）',
  '钡（Ba4934）',
  '钙（Ca1840）',
  '镉（Cd2144）',
  '钴（Co2378）',
  '铬（Cr2843）',
  '铜（Cu2247）',
  '铁（Fe2395）',
  '汞（Hg1942）',
  '钾（K7698）',
  '镁（Mg2802）',
  '锰（Mn2939）',
  'Unnamed: 17',
  '钼（Mo2045）',
  '钠（Na5895）',
  '镍（Ni2216）',
  'Unnamed: 21',
  '磷（P1858）',
  '铅（Pb1822）',
  '铅（Pd3242）',
  '铷（Rb4244）',
  '硒（Se1960）',
  '硅（Si2881）',
  '锡（Sn1899）',
  '锶（Sr4215）',
  '钛（Ti3361）',
  '铊（Tl1908）',
  '钒（V2687）',
  '锌（Zn2062）'],
 '3_1_3': ['序号',
  '养殖场',
  '样品号',
  '砷（As）',
  '镉（Cd）',
  '铬（Cr）',
  '铜（Cu）',
  '镍（Ni）',
  '铅（Pb）'],
 '3_2_1': ['序号', '养殖场 ', '样品号', 'pH'],
 '3_2_2': ['序号',
  '养殖场',
  '样品号',
  '铝（Al3961）',
  '砷（As1937）',
  '硼（B2089）',
  '钡（Ba4934）',
  '钙（Ca1840）',
  '镉（Cd2144）',
  '铂（Co2378）',
  '铬（Cr2843）',
  '铜（Cu2247）',
  '铁（Fe2395）',
  '汞（Hg1942）',
  '钾（K7698）',
  '镁（Mg2802）',
  '锰（Mn2939）',
  '钼（Mo2045）',
  '钠（Na5895）',
  '镍（Ni2216）',
  '磷（P1858）',
  '铅（Pb1822）',
  '钯(Pd3242)',
  '铷(Rb4244)',
  '硒（Se1960）',
  '硅（Si2881）',
  '锡（Sn1899）',
  '锶（Sr4215）',
  '钛（Ti3361）',
  '铊(Tl1908)',
  '钒（V2687）',
  '锌（Zn2062）'],
 '3_2_3': ['序号', '养殖场', '样品号', '砷（As）', '铅（Pb）', '镉（Cd）', '铬（Cr）', '汞（Hg）'],
 '3_3_1': ['序号', '养殖场', '样品号', '精料', '玉米秸', '酒糟'],
 '3_3_2': ['序号', '养殖场', '样品号', '精料', '玉米秸', '酒糟'],
 '3_3_3': ['序号', '养殖场', '样品号', '精料', '玉米秸', '酒糟'],
 '3_3_4': ['序号',
  '养殖场',
  '饲料',
  '样品号',
  '样品重量',
  '铝（Al3961）',
  '砷（As1937）',
  '硼（B2089）',
  '钡（Ba4934）',
  '钙（Ca1840）',
  '镉（Cd2144）',
  '钴（Co2378）',
  '铬（Cr2843）',
  '铜（Cu2247）',
  '铁（Fe2395）',
  '汞（Hg1942）',
  '钾（K7698）',
  '镁（Mg2802）',
  '锰（Mn2939）',
  '钼（Mo2045）',
  '钠（Na5895）',
  '镍（Ni2216）',
  '磷（P1858）',
  '铅（Pb1822）',
  '钯（Pd3242）',
  '铷（Rb4244）',
  '硒（Se1960）',
  '硅（Si2881）',
  '锡（Sn1899）',
  '锶（Sr4215）',
  '钛（Ti3361）',
  '铊（Tl1908）',
  '钒（V2687）',
  '锌（Zn2062）'],
 '3_3_5': ['序号',
  '养殖场',
  '饲料',
  '样品号',
  '砷（As）',
  '铅（Pb）',
  '镉（Cd）',
  '铬（Cr）',
  '铜（Cu）',
  '镍（Ni）'],
 '3_4_1': ['序号',
  '养殖场',
  '牛号',
  '样品号',
  '组织',
  '重量/g',
  '砷（As1937）',
  '铅（Pb1822）',
  '汞（Hg1942）',
  '镉（Cd2144）',
  '铬（Cr2843）',
  '铜（Cu2247）',
  '钴（Co2378）',
  '镍（Ni2216）'],
 '3_4_2': ['序号', '养殖场', '组织名称', '样品号', '克伦特罗含量（μg/kg）', '莱克多巴胺含量（μg/kg）'],
 '3_4_3': ['序号',
  '养殖场',
  '牛号',
  '样品号',
  '组织',
  '砷（As1937）',
  '铅（Pb1822）',
  '镉（Cd2144）',
  '铬（Cr2843）',
  '铜（Cu2247）',
  '钴（Co2378）',
  '镍（Ni2216）'],
 '4_1_1': ['季节',
  '类型',
  '测定时间',
  '气温第一天',
  '气温第二天',
  '气温第三天',
  '湿度第一天',
  '湿度第二天',
  '湿度第三天',
  'NH3第一天',
  'NH3第二天',
  'NH3第三天',
  'PM10第一天',
  'PM10第二天',
  'PM10第三天'],
 '5_1_1': ['样品号',
  'AFB1(µg·kg-1)',
  '氨氮浓度NH3-H（mg·dL-1）',
  '挥发性脂肪酸VFA（mmol·L-1）',
  '乙酸Acetate（mmol·L-1）',
  '丙酸Propionate（mmol·L-1）',
  '乙丙比Acetate/Propionate',
  '丁酸Butyrate（mmol·L-1）',
  '戊酸Valerate（mmol·L-1）',
  '乳酸含量Lactate（mg·100mL-1）',
  '微晶纤维素酶活性Avicelase（U）',
  '羧甲基纤维素酶活性CMCase（U）',
  '纤维二糖酶活性Cellorbiase（U）',
  '木聚糖酶活性Xylanese（U）',
  '微生物蛋白MCP（mg·mL-1）',
  '瘤胃液AFB1(µg·L-1)'],
 '5_1_2': ['样品号',
  'AFB1(µg·kg-1)',
  'Fe',
  'Cu',
  'Zn',
  'Mn',
  'Cr',
  'Se',
  'Ni',
  'Mo',
  'Sn',
  'Si',
  'Sr',
  'B',
  'As',
  'Pb',
  'Cd',
  '挥发性脂肪酸总量',
  '乙酸',
  '丙酸',
  '乙丙比',
  '丁酸',
  '戊酸'],
 '5_1_3': ['样品号',
  'AFB1(µg·kg-1)',
  '谷草转氨酶AST/(IU·L-1)',
  '谷丙转氨酶ALT/(IU·L-1)',
  '白蛋白ALB/(g·L-1)',
  '碱性磷酸酶ALP/(IU·L-1)',
  '乳酸脱氢酶LDH/(IU·L-1)',
  '谷氨酰氨基转移酶(IU·L-1)',
  '总胆汁酸(μmol·L-1)',
  'AFM1(µg·L-1)']}





def index(request):
    #if (request.methord == "GET"):
        
    """
    con =sqlite3.connect("db.sqlite3")
    sql = "SELECT * FROM test01_form1_1_1"
    df = pd.read_sql(sql,con)
    x =df.describe()

    col = list(x.columns)
    c=[]
    #n=0
    for i in x.index:
        li =[x[o][i] for o in col]
        li.insert(0,i)
        c.append(li)
        #c.append([i,df[][i],df[i][1],df[i][2]   ,df[i][3],df[i][4] ,df[i][5]  ,df[i][6]  ,df[i][7]])
        #n+=1
    return render(request,"index.html",context={"col":col,"cc":c})
#使用json


def index2(request):
    #if (request.methord == "GET"):
    
    con =sqlite3.connect("db.sqlite3")
    sql = "SELECT * FROM test01_form1_1_1"
    df = pd.read_sql(sql,con)
    x =df.describe()

    col = list(x.columns)
    c=[]
    #n=0
    for i in x.index:
        li =[x[o][i] for o in col]
        li.insert(0,i)
        c.append(li)
        #c.append([i,df[][i],df[i][1],df[i][2]   ,df[i][3],df[i][4] ,df[i][5]  ,df[i][6]  ,df[i][7]])
        #n+=1
    return render(request,"index.html",context={"col":col,"cc":c})
    #使用json
    """
    return render(request,"index2.html",context={"col":"col","cc":"c"})


def  index3(request,slug):
    con =sqlite3.connect("db.sqlite3")
    sql = "SELECT * FROM test01_form{}".format(slug)
    df = pd.read_sql(sql,con)
    x =df.describe()

    #col.insert(0,'id')
    c=[]
    li=[]
    col=[]
    for o in (x.index):
        li=[x[i][o] for i in list(x.columns)]
        li.insert(0,o)
        c.append(li)

    col=[dic[slug][int(i[-1:])-1] for i in list(x.columns)[1:] ]
    

        #c.append([i,df[][i],df[i][1],df[i][2]   ,df[i][3],df[i][4] ,df[i][5]  ,df[i][6]  ,df[i][7]])
        #n+=1
    con.close()

    return render(request,"index.html",context={"col":col,"cc":c})